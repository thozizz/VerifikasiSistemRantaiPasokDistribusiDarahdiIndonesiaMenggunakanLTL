MODULE main
VAR
	--nodes and pseudo-nodes of ad
	in_n0_initial : boolean;
	in_n12_final : boolean;
	in_n13_final : boolean;
	in_n1 : boolean;
	in_n2 : boolean;
	in_n3 : boolean;
	in_n4 : boolean;
	in_n5 : boolean;
	in_n6 : boolean;
	in_n7 : boolean;
	in_n8 : boolean;
	in_n9 : boolean;
	in_n10 : boolean;
	in_n11 : boolean;
	in_Fn2 : boolean;
	in_Fn3 : boolean;
	in_Fn4 : boolean;
	in_Jn3 : boolean;
	in_Jn4 : boolean;
	in_Jn5 : boolean;
	
	--visitable nodes
	acnode : {n0_initial, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10 ,n11, n12_final, n13_final, nop};
	
	--the visible action of step
	ac : {uji_lab_dan_pengolahan_darah, tes_serologi, verifikasi_golongan_darah, pengolahan_produk_darah_dan_labelling, tes_serologi_nonreaktif, tes_serologi_reaktif, simpan_produk_darah_karantina, informasi_produk_infeksius, penjaminan_mutu_produk, mutu_darah_valid, simpan_darah_infeksius, nop};
	
	--input variables
	tes : {reaktif, nonreaktif};
	mutu_produk : {lulus, gagal};
	--control variables
INIT
	--init all nodes
	in_n0_initial = TRUE &
	in_n12_final = FALSE &
	in_n13_final = FALSE &
	in_n1 = FALSE &
	in_n2 = FALSE &
	in_n3 = FALSE &
	in_n4 = FALSE &
	in_n5 = FALSE &
	in_n6 = FALSE &
	in_n7 = FALSE &
	in_n8 = FALSE &
	in_n9 = FALSE &
	in_n10 = FALSE &
	in_n11 = FALSE &
	in_Fn2 = FALSE &
	in_Fn3 = FALSE &
	in_Fn4 = FALSE &
	in_Jn3 = FALSE &
	in_Jn4 = FALSE &
	in_Jn5 = FALSE &
		
	--init control variables as assign in first nodes
	--set initial visible action node and visible action
	acnode = n0_initial &
	ac = nop;
	
	--shortcut to what happens when an edge is taken
DEFINE
	en0_initialn1_enabled := in_n0_initial;
	en0_initialn1_taken := en0_initialn1_enabled &
		--not in previous nodes anymore
		!next(in_n0_initial) &
		--arrive in target node
		next(in_n1) &
		--posibbly taking hidden edges
		next(in_Fn2) &
		next(in_Fn3) &
		next(in_Fn4) &
		--doing assignments
		--set next node
		next(acnode = n1);

		
DEFINE
	eFn2n2_enabled := in_Fn2;
	eFn2n2_taken := eFn2n2_enabled &
		--not in previous nodes anymore
		!next(in_n1) &
		!next(in_Fn2) &
		--arrive in target node
		next(in_n2) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n2);
		
DEFINE
	eFn3n3_enabled := in_Fn3;
	eFn3n3_taken := eFn3n3_enabled &
		--not in previous nodes anymore
		!next(in_n1) &
		!next(in_Fn3) &
		--arrive in target node
		next(in_n3) &
		--posibbly taking hidden edges
		next(in_Jn3) &
		--doing assignments
		--set next node
		next(acnode = n3);
		
DEFINE
	eFn4n4_enabled := in_Fn4;
	eFn4n4_taken := eFn4n4_enabled &
		--not in previous nodes anymore
		!next(in_n1) &
		!next(in_Fn4) &
		--arrive in target node
		next(in_n4) &
		--posibbly taking hidden edges
		next(in_Jn4) &
		--doing assignments
		--set next node
		next(acnode = n4);


DEFINE
	en2n5_enabled := in_n2 & (tes = nonreaktif);
	en2n5_taken := en2n5_enabled &
		--not in previous nodes anymore
		!next(in_n2) &
		--arrive in target node
		next(in_n5) &
		--posibbly taking hidden edges
		next(in_Jn5) &
		--doing assignments
		--set next node
		next(acnode = n5);

DEFINE
	en2n6_enabled := in_n2 & (tes = reaktif);
	en2n6_taken := en2n6_enabled &
		--not in previous nodes anymore
		!next(in_n2) &
		!next(in_Fn3) &
		!next(in_Fn4) &
		--arrive in target node
		next(in_n6) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n6);

DEFINE
	eJn3Jn4Jn5n7_enabled := in_Jn3 & in_Jn4 & in_Jn5;
	eJn3Jn4Jn5n7_taken := eJn3Jn4Jn5n7_enabled &
		--not in previous nodes anymore
		!next(in_Jn3) &
		!next(in_n3) &
		!next(in_Jn4) &
		!next(in_n4) &
		!next(in_Jn5) &
		!next(in_n5) &
		--arrive in target node
		next(in_n7) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n7);

DEFINE
	en6n8_enabled := in_n6;
	en6n8_taken := en6n8_enabled &
		--not in previous nodes anymore
		!next(in_n6) &
		--arrive in target node
		next(in_n8) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n8);
		
DEFINE
	en7n9_enabled := in_n7;
	en7n9_taken := en7n9_enabled &
		--not in previous nodes anymore
		!next(in_n7) &
		--arrive in target node
		next(in_n9) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n9);

DEFINE
	en8n9_enabled := in_n8;
	en8n9_taken := en8n9_enabled &
		--not in previous nodes anymore
		!next(in_n8) &
		--arrive in target node
		next(in_n9) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n9);
		
DEFINE
	en9n10_enabled := in_n9 & (mutu_produk = lulus);
	en9n10_taken := en9n10_enabled &
		--not in previous nodes anymore
		!next(in_n9) &
		--arrive in target node
		next(in_n10) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n10);

DEFINE
	en9n11_enabled := in_n10 & (mutu_produk = gagal);
	en9n11_taken := en9n11_enabled &
		--not in previous nodes anymore
		!next(in_n9) &
		--arrive in target node
		next(in_n11) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n11);
	
DEFINE
	en10n12_final_enabled := in_n10;
	en10n12_final_taken := en10n12_final_enabled &
		--not in previous nodes anymore
		!next(in_n10) &
		--arrive in target node
		next(in_n12_final) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n12_final);

DEFINE
	en11n13_final_enabled := in_n10;
	en11n13_final_taken := en11n13_final_enabled &
		--not in previous nodes anymore
		!next(in_n11) &
		--arrive in target node
		next(in_n13_final) &
		--posibbly taking hidden edges
		--doing assignments
		--set next node
		next(acnode = n13_final);
		
TRANS
	( (in_n0_initial = next(in_n0_initial)) | 
	en0_initialn1_taken ) & 
	( (in_n1 = next(in_n1)) |
	en0_initialn1_taken |
	eFn2n2_taken |
	eFn3n3_taken |
	eFn4n4_taken ) &
	( (in_n2 = next(in_n2)) |
	eFn2n2_taken |
	en2n5_taken |
	en2n6_taken ) &
	( (in_n3 =  next(in_n3)) |
	eFn3n3_taken |
	eJn3Jn4Jn5n7_taken ) &
	( (in_n4 = next(in_n4)) |
	eFn4n4_taken |
	eJn3Jn4Jn5n7_taken ) &
	( (in_n5 = next(in_n5)) |
	en2n5_taken |
	eJn3Jn4Jn5n7_taken ) &
	( (in_n6 = next(in_n6)) |
	en2n6_taken |
	en6n8_taken ) &
	( (in_n7 = next(in_n7)) |
	eJn3Jn4Jn5n7_taken |
	en7n9_taken ) &
	( (in_n8 = next(in_n8)) |
	en6n8_taken |
	en8n9_taken ) &
	( (in_n9 = next(in_n9)) |
	en7n9_taken |
	en8n9_taken |
	en9n10_taken |
	en9n11_taken ) &
	( (in_n10 = next(in_n10)) |
	en9n10_taken |
	en10n12_final_taken) &
	( (in_n11 = next(in_n11)) |
	en9n11_taken |
	en11n13_final_taken ) &
	( (in_n12_final = next(in_n12_final)) |
	en10n12_final_taken ) &
	( (in_n13_final = next(in_n13_final)) |
	en11n13_final_taken ) &
	( (in_Fn2 = next(in_Fn2)) |
	en0_initialn1_taken |
	eFn2n2_taken ) &
	( (in_Fn3 = next(in_Fn3)) |
	en0_initialn1_taken |
	eFn3n3_taken ) &
	( (in_Fn4 = next(in_Fn4)) |
	en0_initialn1_taken |
	eFn4n4_taken ) &
	( (in_Jn3 = next(in_Jn3) ) | 
	eFn3n3_taken | 
	eJn3Jn4Jn5n7_taken ) &
	( (in_Jn4 = next(in_Jn4) ) | 
	eFn4n4_taken |
	eJn3Jn4Jn5n7_taken ) &
	( (in_Jn5 = next(in_Jn5) ) | 
	en2n5_taken |
	eJn3Jn4Jn5n7_taken );
	
TRANS
	( (next(acnode =nop) <-> in_n12_final) ) &
		(in_n12_final | (
			(en0_initialn1_taken) |
			(eFn2n2_taken) |
			(en2n5_taken) |
			(en2n6_taken) |
			(eFn3n3_taken) |
			(eFn4n4_taken) |
			(eJn3Jn4Jn5n7_taken) |
			(en6n8_taken) |
			(en7n9_taken) |
			(en8n9_taken) |
			(en9n10_taken) |
			(en10n12_final_taken) ) );
			
TRANS
	( (next(acnode =nop) <-> in_n13_final) ) &
		(in_n13_final | (
			(en0_initialn1_taken) |
			(eFn2n2_taken) |
			(en2n5_taken) |
			(en2n6_taken) |
			(eFn3n3_taken) |
			(eFn4n4_taken) |
			(eJn3Jn4Jn5n7_taken) |
			(en6n8_taken) |
			(en7n9_taken) |
			(en8n9_taken) |
			(en9n11_taken) |
			(en11n13_final_taken) ) );
			
TRANS
	(next(acnode) = n0_initial -> next(ac) = nop) &
	(next(acnode) = n1 -> next(ac) = uji_lab_dan_pengolahan_darah) &
	(next(acnode) = n2 -> next(ac) = tes_serologi) &
	(next(acnode) = n3 -> next(ac) = verifikasi_golongan_darah) &
	(next(acnode) = n4 -> next(ac) = pengolahan_produk_darah_dan_labelling) &
	(next(acnode) = n5 -> next(ac) = tes_serologi_nonreaktif) &
	(next(acnode) = n6 -> next(ac) = tes_serologi_reaktif) &
	(next(acnode) = n7 -> next(ac) = simpan_produk_darah_karantina) &
	(next(acnode) = n8 -> next(ac) = informasi_produk_infeksius) &
	(next(acnode) = n9 -> next(ac) = penjaminan_mutu_produk) &
	(next(acnode) = n10 -> next(ac) = mutu_darah_valid) &
	(next(acnode) = n11 -> next(ac) = simpan_darah_infeksius) &
	(next(acnode) = n12_final -> next(ac) = nop) &
	(next(acnode) = n13_final -> next(ac) = nop);
	
--LTLSPEC G (ac = uji_lab_dan_pengolahan_darah -> F(ac = tes_serologi) & F(ac = verifikasi_golongan_darah) & F (ac = pengolahan_produk_darah_dan_labelling))

--LTLSPEC F(ac = tes_serologi_nonreaktif) xor F(ac = tes_serologi_reaktif)

--LTLSPEC	G(ac = tes_serologi -> F(ac = tes_serologi_reaktif) xor F(ac = tes_serologi_nonreaktif))	

--LTLSPEC F(ac = mutu_darah_valid) xor F(ac = simpan_darah_infeksius)

--LTLSPEC	G(ac = penjaminan_mutu_produk -> F(ac = mutu_darah_valid) xor F(ac = simpan_darah_infeksius))	

--LTLSPEC	G(ac = tes_serologi_nonreaktif -> F(ac = tes_serologi_reaktif))	

DEFINE
Phi15 := ((ac = tes_serologi) & tes = nonreaktif);
Phi16 := (ac = tes_serologi_nonreaktif & ac = verifikasi_golongan_darah & ac = pengolahan_produk_darah_dan_labelling);
Phi17 := ((ac = penjaminan_mutu_produk) & mutu_produk = lulus);

--Setiap penyumbangan dengan hasil uji saring IMLTD reaktif harus dipisahkan
LTLSPEC G((ac = tes_serologi_reaktif) -> F(ac = simpan_darah_infeksius) & F ((ac = penjaminan_mutu_produk) & mutu_produk = gagal))

LTLSPEC G (ac = mutu_darah_valid -> O (Phi15) & O (Phi16) & O(Phi17))

LTLSPEC F((ac = informasi_produk_infeksius) & O(ac = pengolahan_produk_darah_dan_labelling))